{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# plot_calibration_curve with examples\n\nAn example showing the plot_calibration_curve method\nused by a scikit-learn classifier\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "# Authors: scikit-plots developers\n# License: MIT\n\nfrom sklearn.datasets import (\n    make_classification,\n    load_breast_cancer as data_2_classes,\n    load_iris as data_3_classes,\n    load_digits as data_10_classes,\n)\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.naive_bayes import GaussianNB\nfrom sklearn.svm import LinearSVC\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.model_selection import cross_val_predict\nimport numpy as np; np.random.seed(0)\n# importing pylab or pyplot\nimport matplotlib.pyplot as plt\n\n# Import scikit-plot\nimport scikitplot as skplt\n\n# Load the data\nX, y = make_classification(\n    n_samples=100000, \n    n_features=20,\n    n_informative=4,\n    n_redundant=2,\n    n_repeated=0,\n    n_classes=3,\n    n_clusters_per_class=2,\n    random_state=0\n)\nX_train, y_train, X_val, y_val = X[:1000], y[:1000], X[1000:], y[1000:]\n\n# Create an instance of the LogisticRegression\nlr_probas = LogisticRegression().fit(X_train, y_train).predict_proba(X_val)\nnb_probas = GaussianNB().fit(X_train, y_train).predict_proba(X_val)\nsvc_scores = LinearSVC().fit(X_train, y_train).decision_function(X_val)\nrf_probas = RandomForestClassifier().fit(X_train, y_train).predict_proba(X_val)\n\nprobas_dict = {\n    LogisticRegression(): lr_probas,\n    GaussianNB(): nb_probas,\n    LinearSVC(): svc_scores,\n    RandomForestClassifier(): rf_probas,\n}\n# Plot!\nax = skplt.metrics.plot_calibration_curve(\n    y_val,\n    y_prob_list=list(probas_dict.values()),\n    y_is_decision=list([False, False, True, False]),\n    n_bins=10, \n    clf_names=list(probas_dict.keys()),\n    multi_class=None,\n    class_index=2, \n    classes_to_plot=[2],\n);\n# Adjust layout to make sure everything fits\nplt.tight_layout()\n# Save the plot to a file\nplt.savefig('plot_calibration_curve_script.png')\n# Display the plot\nplt.show(block=True)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.6"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}